{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["ConnectionFactory","stores","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","error","name","closeConnection","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAO,kBAAMA,oBAAoB,CAAC,MAAM;;AAGpC,sBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;;AAGA,uBAAO,MAAMH,iBAAN,CAAwB;;AAE3BI,kCAAc;AACV,8BAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACH;;AAGD,2BAAOC,aAAP,GAAuB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gCAAIP,UAAJ,EAAgB,OAAOM,QAAQN,UAAR,CAAP;;AAEhB,kCAAMQ,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wCAAYG,eAAZ,GAA8BC,KAAK;AAC/Bd,kDAAkBe,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAP,wCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBZ,6CAAaY,EAAEE,MAAF,CAASC,MAAtB;;AAEAd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,2CAAWC,KAAX,GAAmB,MAAM;AACrB,0CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;;AAIAG,wCAAQN,UAAR;AACH,6BAVD;;AAYAQ,wCAAYU,OAAZ,GAAsBN,KAAKL,OAAOK,EAAEE,MAAF,CAASK,KAAT,CAAeC,IAAtB,CAA3B;AAEH,yBAxBM,CAAP;AAyBH;;AAGD,2BAAOC,eAAP,GAAyB;AACrB,4BAAIrB,UAAJ,EAAgB;AACZC;AACH;AACJ;;AAGD,2BAAOY,aAAP,CAAqBb,UAArB,EAAiC;AAC7BD,+BAAOuB,OAAP,CAAeC,SAAS;AACpB;AACA,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACIvB,WAAW0B,iBAAX,CAA6BH,KAA7B;AACJvB,uCAAW2B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAChCK,+CACI;AAF4B,6BAApC;AAIH,yBARD;AASH;AArD0B,iBAA/B;AAuDH,aA/DgC,GAA1B","file":"ConnectionFactory.js","sourcesContent":["export const ConnectionFactory = (() => {\n\n\n    const stores = ['negociacoes'];\n    let connection = null;\n    let close = null;\n\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Static Class, não é possível criar uma instância da mesma')\n        }\n\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n\n                if (connection) return resolve(connection);\n\n                const openRequest = indexedDB.open('jscangaceiro', 2);\n\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n                    connection = e.target.result;\n\n                    close = connection.close.bind(connection);\n\n                    connection.close = () => {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => reject(e.target.error.name);\n\n            })\n        }\n\n\n        static closeConnection() {\n            if (connection) {\n                close();\n            }\n        }\n\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                // if sem bloco, mais sucinto!\n                if (connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {\n                    autoIncrement:\n                        true\n                });\n            });\n        }\n    }\n})();"]}